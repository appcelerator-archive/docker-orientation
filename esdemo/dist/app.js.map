{"version":3,"sources":["../src/app.js"],"names":[],"mappings":";;;;;;AAAA;;AACA;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAM,MAAM,qBAAM,KAAN,CAAN;AACN,IAAM,MAAM,wBAAN;AACN,IAAM,OAAO,QAAQ,GAAR,CAAY,IAAZ,IAAoB,IAApB;AACb,IAAM,YAAY,eAAK,IAAL,CAAU,SAAV,EAAqB,QAArB,CAAZ;;kBAES;;;;AAGf,IAAI,GAAJ,CAAQ,SAAR;;AAEA,IAAI,GAAJ,CAAQ,SAAR,EAAmB,EAAE,MAAM,kBAAI,IAAJ,EAAU,SAAS,kBAAI,OAAJ,EAA9C;;;AAGA,IAAI,GAAJ,CAAQ,sBAAO,QAAQ,GAAR,CAAY,QAAZ,IAAwB,YAAxB,GAAuC,UAAvC,GAAoD,KAApD,CAAf;AACA,IAAI,GAAJ,CAAQ,qBAAW,IAAX,EAAR;AACA,IAAI,GAAJ,CAAQ,qBAAW,UAAX,CAAsB,EAAE,UAAU,IAAV,EAAxB,CAAR;;;AAGA,IAAI,SAAS,iCAAyB,GAAzB,CAAT;AACJ,OAAO,IAAP,CAAY,SAAZ;AACA,IAAI,GAAJ,CAAQ,OAAO,MAAP,CAAR;;;AAGA,IAAI,QAAQ,IAAR,KAAiB,MAAjB,EAAyB;;AAC3B,QAAI,GAAJ,CAAQ,MAAR,EAAgB,IAAhB;AACA,QAAM,SAAS,IAAI,MAAJ,CAAW,IAAI,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAC/C,UAAI,6BAAJ,EAAmC,kBAAI,IAAJ,EAAU,kBAAI,OAAJ,EAAa,OAAO,OAAP,GAAiB,IAAjB,CAA1D,CAD+C;AAE/C,UAAI,GAAJ,CAAQ,QAAR,EAAkB,MAAlB;;;;AAF+C,kBAM/C,CAAa,QAAb;;AAN+C,kBAQ/C,CAAa,SAAb,EAR+C;;AAU/C,eAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC5B,gBAAQ,EAAR,CAAW,MAAX,EAAmB,YAAM;AACvB,wDADuB;AAEvB,iBAAO,KAAP,CAAa,YAAM;AACjB,gBAAI,gBAAJ,EADiB;AAEjB,oBAAQ,IAAR,GAFiB;WAAN,CAAb,CAFuB;SAAN,CAAnB,CAD4B;OAA9B;KAVyC,CAArC;OAFqB;CAA7B","file":"app.js","sourcesContent":["import 'babel-polyfill';\nimport 'source-map-support/register';\n\nimport { DirectoryRouteLoader } from 'atomiq';\nimport bodyParser from 'body-parser';\nimport debug from 'debug';\nimport express from 'express';\nimport morgan from 'morgan';\nimport path from 'path';\nimport pkg from '../package.json';\n\nconst log = debug('app');\nconst app = express();\nconst port = process.env.PORT || 3000;\nconst routesDir = path.join(__dirname, 'routes');\n\nexport default app;\n\n// provide express module to atomiq\napp.set('express', express);\n\napp.set('service', { name: pkg.name, version: pkg.version });\n\n// install middleware\napp.use(morgan(process.env.NODE_ENV == 'production' ? 'combined' : 'dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// load routes\nlet loader = new DirectoryRouteLoader(app);\nloader.load(routesDir);\napp.use(loader.router);\n\n// start listening when this is the main node module\nif (require.main === module) {\n  app.set('port', port);\n  const server = app.listen(app.get('port'), () => {\n    log('%s v%s listening on port %s', pkg.name, pkg.version, server.address().port);\n    app.set('server', server);\n\n    // close server gracefully...\n    // handle ctrl-c\n    exitOnSignal('SIGINT');\n    // handle docker stop\n    exitOnSignal('SIGTERM');\n\n    function exitOnSignal(signal) {\n      process.on(signal, () => {\n        log(`$(signal) received, stopping server...`);\n        server.close(() => {\n          log('server stopped');\n          process.exit();\n        });\n      });\n    }\n  });\n}\n"]}