{"version":3,"sources":["../../src/test/test.js"],"names":[],"mappings":";;AAAA;;AACA;;AAEA;;;;AACA;;;;;;;;;;;;;;;;AAYA,IAAI,QAAQ,SAAR,KAAQ,CAAC,SAAD,EAAmC;MAAvB,gEAAU,IAAI,IAAJ,gBAAa;;;;AAG7C,SAAO,iBAAe,IAAf;;;;;AACL,iBAAK,OAAL,GAAe,OAAf;;;4CAEQ;;;AACN;;;;;;;;AAEA;;;;;;;;GANG,CAHsC;CAAnC;;AAcZ,SAAS,OAAT,EAAkB,YAAW;;;;AAG3B,KAAG,kDAAH,EAAuD,MAAM;QACvD,OACA;;;;;AADA,oBAAQ;;4CACK,qBAAW,YAAX,CAAwB,KAAxB;;;AAAb;;AACJ,kCAAO,IAAP;AACA,6BAAO,KAAP,CAAa,KAAK,KAAL,EAAY,KAAzB;AACA,6BAAO,KAAP,CAAa,KAAK,IAAL,EAAW,aAAxB;AACA,6BAAO,KAAP,CAAa,KAAK,IAAL,EAAW,+BAAxB;;;;;;;;GAN2D,CAA7D,EAH2B;CAAX,CAAlB","file":"test.js","sourcesContent":["import 'babel-polyfill';\nimport 'source-map-support/register';\n\nimport GitHubUser from '../lib/GitHubUser';\nimport assert from 'assert';\n\n// WARNING: don't use arrow functions with mocha describe(), it(),\n// and all the other standard mocha functions that take callbacks\n// if you want to be able to use `this.timeout()`. Because of the way\n// arrow functions work, the `this` context will be the module, not\n// the mocha context in the callback. Even if you don't anticipate\n// needing access to the mocha `this` context in the callbacks, it's\n// best to use full `function()` syntax for the mocha functions.\n\n// async mocha helper inspired by Jason Jarrett:\n// http://staxmanade.com/2015/11/testing-asyncronous-code-with-mochajs-and-es7-async-await/\nlet mocha = (asyncFunc, timeout = 2 * 1000) => {\n  // Returns a function that takes a `done` parameter as mocha expects.\n  // It doesn't use arrow syntax so the `this` context will be set correctly\n  return async function(done) {\n    this.timeout = timeout; // eslint-disable-line\n    try {\n      await asyncFunc();\n      done();\n    } catch (err) {\n      done(err);\n    }\n  };\n};\n\ndescribe('tests', function() {\n\n  // This is an auto-generated sample test to demo testing async functions\n  it('should fetch GitHub user details for \"subfuzion\"', mocha(async () => {\n    let login = 'subfuzion';\n    let user = await GitHubUser.fetchDetails(login);\n    assert(user);\n    assert.equal(user.login, login);\n    assert.equal(user.name, 'Tony Pujals');\n    assert.equal(user.blog, 'https://twitter.com/subfuzion');\n  }));\n\n});\n"]}